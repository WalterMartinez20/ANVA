// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  nombres   String
  apellidos String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
  orders    Order[]
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  price            Float
  stock            Int               @default(0)
  category         String?
  width            Float?            // ancho (cm)
  height           Float?            // alto (cm)
  depth            Float?            // profundidad (cm)
  strapDescription String?           // descripción del asa
  colors           String?           // lista de colores disponibles.Ej: "negro, gris, beige"
  materialInfo     String?           // texto sobre el material (sin cantidad)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  images           ProductImage[]
  materials        ProductMaterial[]
  favorites        Favorite[]
  orderItems       OrderItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  isMain    Boolean  @default(false)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Material {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  stock       Int               @default(0)
  unit        String? // Por ejemplo: metros, unidades, etc.
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  products    ProductMaterial[]
}

model ProductMaterial {
  id         Int      @id @default(autoincrement())
  productId  Int
  materialId Int
  quantity   Float // Cantidad de material usado en el producto
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([productId, materialId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  status    OrderStatus @default(PENDING)
  total     Float
  address   String? // Dirección de envío
  phone     String? // Teléfono de contacto
  notes     String? // Notas adicionales
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  payments  Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int
  amount    Float
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  reference String? // Referencia de pago
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
